// ========================================
// SCRIPTS PARA POSTMAN - API BIBLIOTECA
// ========================================

// ========================================
// SCRIPT PARA LOGIN AUTOM√ÅTICO
// ========================================
// Agregar este script en el evento "Tests" de las peticiones de Login

// Verificar que la respuesta sea exitosa
pm.test("Login exitoso", function () {
    pm.response.to.have.status(200);
});

// Extraer y guardar el token autom√°ticamente
if (pm.response.code === 200) {
    const responseJson = pm.response.json();
    
    if (responseJson.token) {
        // Guardar el token en la variable de entorno
        pm.environment.set("auth_token", responseJson.token);
        
        // Guardar informaci√≥n del usuario
        pm.environment.set("user_name", responseJson.nombre);
        pm.environment.set("user_email", responseJson.email);
        pm.environment.set("user_type", responseJson.tipoUsuario);
        
        console.log("‚úÖ Login exitoso!");
        console.log("üë§ Usuario:", responseJson.nombre, responseJson.apellido);
        console.log("üìß Email:", responseJson.email);
        console.log("üîë Token guardado:", responseJson.token);
        console.log("üë®‚Äçüíº Tipo:", responseJson.tipoUsuario);
    } else if (responseJson.mensaje) {
        console.log("‚ùå Error en login:", responseJson.mensaje);
    }
} else {
    console.log("‚ùå Error HTTP:", pm.response.code);
}

// ========================================
// SCRIPT PARA VALIDAR RESPUESTAS DE LIBROS
// ========================================
// Agregar este script en el evento "Tests" de las peticiones de libros

pm.test("Respuesta exitosa", function () {
    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);
});

pm.test("Tiempo de respuesta aceptable", function () {
    pm.expect(pm.response.responseTime).to.be.below(2000);
});

// Validar estructura de libro individual
if (pm.response.code === 200 && pm.response.json().id) {
    const libro = pm.response.json();
    
    pm.test("Libro tiene campos requeridos", function () {
        pm.expect(libro).to.have.property('id');
        pm.expect(libro).to.have.property('titulo');
        pm.expect(libro).to.have.property('autor');
        pm.expect(libro).to.have.property('isbn');
        pm.expect(libro).to.have.property('anioPublicacion');
        pm.expect(libro).to.have.property('estado');
    });
    
    pm.test("Campos tienen tipos correctos", function () {
        pm.expect(libro.id).to.be.a('number');
        pm.expect(libro.titulo).to.be.a('string');
        pm.expect(libro.autor).to.be.a('string');
        pm.expect(libro.isbn).to.be.a('string');
        pm.expect(libro.anioPublicacion).to.be.a('number');
        pm.expect(libro.estado).to.be.a('string');
    });
}

// Validar lista de libros
if (pm.response.code === 200 && Array.isArray(pm.response.json())) {
    const libros = pm.response.json();
    
    pm.test("Lista de libros no est√° vac√≠a", function () {
        pm.expect(libros.length).to.be.greaterThan(0);
    });
    
    pm.test("Cada libro tiene ID", function () {
        libros.forEach((libro, index) => {
            pm.expect(libro, `Libro ${index}`).to.have.property('id');
        });
    });
}

// ========================================
// SCRIPT PARA VALIDAR RESPUESTAS DE USUARIOS
// ========================================
// Agregar este script en el evento "Tests" de las peticiones de usuarios

pm.test("Respuesta exitosa", function () {
    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);
});

// Validar estructura de usuario individual
if (pm.response.code === 200 && pm.response.json().id) {
    const usuario = pm.response.json();
    
    pm.test("Usuario tiene campos requeridos", function () {
        pm.expect(usuario).to.have.property('id');
        pm.expect(usuario).to.have.property('nombre');
        pm.expect(usuario).to.have.property('apellido');
        pm.expect(usuario).to.have.property('email');
        pm.expect(usuario).to.have.property('tipoUsuario');
        pm.expect(usuario).to.have.property('estado');
    });
    
    pm.test("Email tiene formato v√°lido", function () {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        pm.expect(usuario.email).to.match(emailRegex);
    });
}

// ========================================
// SCRIPT PARA VALIDAR RESPUESTAS DE PR√âSTAMOS
// ========================================
// Agregar este script en el evento "Tests" de las peticiones de pr√©stamos

pm.test("Respuesta exitosa", function () {
    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);
});

// Validar estructura de pr√©stamo individual
if (pm.response.code === 200 && pm.response.json().id) {
    const prestamo = pm.response.json();
    
    pm.test("Pr√©stamo tiene campos requeridos", function () {
        pm.expect(prestamo).to.have.property('id');
        pm.expect(prestamo).to.have.property('usuario');
        pm.expect(prestamo).to.have.property('libro');
        pm.expect(prestamo).to.have.property('fechaPrestamo');
        pm.expect(prestamo).to.have.property('estado');
    });
    
    pm.test("Fechas tienen formato correcto", function () {
        pm.expect(prestamo.fechaPrestamo).to.match(/^\d{4}-\d{2}-\d{2}$/);
        if (prestamo.fechaDevolucionEsperada) {
            pm.expect(prestamo.fechaDevolucionEsperada).to.match(/^\d{4}-\d{2}-\d{2}$/);
        }
    });
}

// ========================================
// SCRIPT PARA VALIDAR ERRORES
// ========================================
// Agregar este script en peticiones que esperan errores

pm.test("Error esperado", function () {
    pm.expect(pm.response.code).to.be.oneOf([400, 401, 403, 404, 500]);
});

pm.test("Mensaje de error presente", function () {
    if (pm.response.code >= 400) {
        const responseText = pm.response.text();
        pm.expect(responseText).to.not.be.empty;
    }
});

// ========================================
// SCRIPT PARA ESTAD√çSTICAS
// ========================================
// Agregar este script en peticiones de estad√≠sticas

pm.test("Estad√≠sticas v√°lidas", function () {
    pm.expect(pm.response.code).to.equal(200);
    
    const stats = pm.response.json();
    pm.expect(stats).to.be.an('object');
    
    // Verificar que los valores son n√∫meros
    Object.values(stats).forEach(value => {
        pm.expect(value).to.be.a('number');
        pm.expect(value).to.be.at.least(0);
    });
    
    console.log("üìä Estad√≠sticas:", JSON.stringify(stats, null, 2));
});

// ========================================
// SCRIPT PARA B√öSQUEDAS
// ========================================
// Agregar este script en peticiones de b√∫squeda

pm.test("B√∫squeda exitosa", function () {
    pm.expect(pm.response.code).to.equal(200);
});

pm.test("Resultados son array", function () {
    const results = pm.response.json();
    pm.expect(results).to.be.an('array');
});

// ========================================
// UTILIDADES GENERALES
// ========================================

// Funci√≥n para imprimir respuesta en consola
function logResponse() {
    console.log("üì° Response Status:", pm.response.code);
    console.log("‚è±Ô∏è Response Time:", pm.response.responseTime + "ms");
    
    if (pm.response.code === 200) {
        const data = pm.response.json();
        console.log("üìÑ Response Data:", JSON.stringify(data, null, 2));
    } else {
        console.log("‚ùå Response Error:", pm.response.text());
    }
}

// Funci√≥n para validar token
function validateToken() {
    const token = pm.environment.get("auth_token");
    if (!token || token === "") {
        console.log("‚ö†Ô∏è No hay token de autenticaci√≥n configurado");
        return false;
    }
    return true;
}

// Funci√≥n para obtener timestamp
function getCurrentTimestamp() {
    return new Date().toISOString();
}

// ========================================
// EJEMPLO DE USO EN PREREQUEST SCRIPT
// ========================================

// Agregar timestamp a las peticiones
pm.request.headers.add({
    key: 'X-Timestamp',
    value: getCurrentTimestamp()
});

// Verificar token antes de peticiones autenticadas
if (pm.request.url.toString().includes('/api/') && 
    !pm.request.url.toString().includes('/auth/login') &&
    !pm.request.url.toString().includes('/auth/register')) {
    
    if (!validateToken()) {
        console.log("‚ùå Token requerido para esta petici√≥n");
    }
}

// ========================================
// INSTRUCCIONES DE USO
// ========================================

/*
INSTRUCCIONES PARA USAR ESTOS SCRIPTS:

1. LOGIN AUTOM√ÅTICO:
   - Copia el script de "LOGIN AUTOM√ÅTICO" 
   - P√©galo en la pesta√±a "Tests" de las peticiones de Login
   - El token se guardar√° autom√°ticamente

2. VALIDACI√ìN DE RESPUESTAS:
   - Copia los scripts correspondientes seg√∫n el tipo de endpoint
   - P√©galos en la pesta√±a "Tests" de cada petici√≥n
   - Los tests se ejecutar√°n autom√°ticamente

3. UTILIDADES:
   - Usa las funciones en scripts personalizados
   - Agrega el script de "PREREQUEST" para funcionalidades globales

4. PERSONALIZACI√ìN:
   - Modifica los tests seg√∫n tus necesidades
   - Agrega validaciones espec√≠ficas para tu API
   - Usa console.log() para debugging

EJEMPLO DE IMPLEMENTACI√ìN:

1. Abre la petici√≥n "Login Usuario"
2. Ve a la pesta√±a "Tests"
3. Copia y pega el script "LOGIN AUTOM√ÅTICO"
4. Guarda la colecci√≥n
5. Ejecuta la petici√≥n
6. Verifica en la consola que el token se guard√≥

¬°Los scripts est√°n listos para usar! üöÄ
*/
